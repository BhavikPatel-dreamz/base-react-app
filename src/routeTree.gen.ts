/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as BhavikRouteImport } from './routes/bhavik'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as SettingsProfileRouteImport } from './routes/settings/profile'
import { Route as AdminUsersIndexRouteImport } from './routes/admin/users/index'
import { Route as AdminUsersUserIdRouteImport } from './routes/admin/users/$userId'
import { Route as AdminAnalyticsTypeRouteImport } from './routes/admin/analytics/$type'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const BhavikRoute = BhavikRouteImport.update({
  id: '/bhavik',
  path: '/bhavik',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsProfileRoute = SettingsProfileRouteImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersIndexRoute = AdminUsersIndexRouteImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersUserIdRoute = AdminUsersUserIdRouteImport.update({
  id: '/admin/users/$userId',
  path: '/admin/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAnalyticsTypeRoute = AdminAnalyticsTypeRouteImport.update({
  id: '/admin/analytics/$type',
  path: '/admin/analytics/$type',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/bhavik': typeof BhavikRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/admin': typeof AdminIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/admin/analytics/$type': typeof AdminAnalyticsTypeRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users': typeof AdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/bhavik': typeof BhavikRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/admin': typeof AdminIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/admin/analytics/$type': typeof AdminAnalyticsTypeRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users': typeof AdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/bhavik': typeof BhavikRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/admin/': typeof AdminIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/admin/analytics/$type': typeof AdminAnalyticsTypeRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users/': typeof AdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/bhavik'
    | '/dashboard'
    | '/login'
    | '/profile'
    | '/register'
    | '/users'
    | '/settings/profile'
    | '/admin'
    | '/settings'
    | '/admin/analytics/$type'
    | '/admin/users/$userId'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/bhavik'
    | '/dashboard'
    | '/login'
    | '/profile'
    | '/register'
    | '/users'
    | '/settings/profile'
    | '/admin'
    | '/settings'
    | '/admin/analytics/$type'
    | '/admin/users/$userId'
    | '/admin/users'
  id:
    | '__root__'
    | '/bhavik'
    | '/dashboard'
    | '/login'
    | '/profile'
    | '/register'
    | '/users'
    | '/settings/profile'
    | '/admin/'
    | '/settings/'
    | '/admin/analytics/$type'
    | '/admin/users/$userId'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  BhavikRoute: typeof BhavikRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  UsersRoute: typeof UsersRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  AdminIndexRoute: typeof AdminIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  AdminAnalyticsTypeRoute: typeof AdminAnalyticsTypeRoute
  AdminUsersUserIdRoute: typeof AdminUsersUserIdRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bhavik': {
      id: '/bhavik'
      path: '/bhavik'
      fullPath: '/bhavik'
      preLoaderRoute: typeof BhavikRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users/$userId': {
      id: '/admin/users/$userId'
      path: '/admin/users/$userId'
      fullPath: '/admin/users/$userId'
      preLoaderRoute: typeof AdminUsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/analytics/$type': {
      id: '/admin/analytics/$type'
      path: '/admin/analytics/$type'
      fullPath: '/admin/analytics/$type'
      preLoaderRoute: typeof AdminAnalyticsTypeRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  BhavikRoute: BhavikRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  UsersRoute: UsersRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  AdminIndexRoute: AdminIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  AdminAnalyticsTypeRoute: AdminAnalyticsTypeRoute,
  AdminUsersUserIdRoute: AdminUsersUserIdRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
